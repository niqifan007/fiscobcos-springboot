package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.StaticStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class OrderEvidence extends Contract {
    public static final String[] BINARY_ARRAY = {"","920191850190611125565b506001600160a01b0386166000908152600188810160209081526040808420426005820155600701805460ff19908116851790915560028c0183528185208054909116905560038b01909152822082905560068901805491929091610fdd9084906115a5565b90915550600198975050505050505050565b6000610ffb83836110ed565b611007575060006105ae565b6001600160a01b038216600090815260208481526040808320805460ff19169055600180870190925282208281559190611043908301826111a9565b6110516002830160006111a9565b61105f6003830160006111a9565b61106d6004830160006111a9565b6000600583018190556006830181905560078301805460ff191690556110979060088401906111e6565b50506001600160a01b03821660009081526002840160209081526040808320805460ff19169055600386019091528120819055600684018054600192906110df908490611578565b909155506001949350505050565b60006001600160a01b038216611105575060006105ae565b506001600160a01b03166000908152602091909152604090205460ff1690565b828054611131906115bd565b90600052602060002090601f0160209004810192826111535760008555611199565b82601f1061116c57805160ff1916838001178555611199565b82800160010185558215611199579182015b8281111561119957825182559160200191906001019061117e565b506111a5929150611200565b5090565b5080546111b5906115bd565b6000825580601f106111c5575050565b601f0160209004906000526020600020908101906111e39190611200565b50565b50805460008255906000526020600020908101906111e391905b5b808211156111a55760008155600101611201565b80356001600160a01b038116811461122c57600080fd5b919050565b60006020828403121561124357600080fd5b61058282611215565b6020808252825182820181905260009190848201906040850190845b8181101561128457835183529284019291840191600101611268565b50909695505050505050565b6000806000606084860312156112a557600080fd5b83359250602084013591506112bc60408501611215565b90509250925092565b600080604083850312156112d857600080fd5b6112e183611215565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261131657600080fd5b813567ffffffffffffffff80821115611331576113316112ef565b604051601f8301601f19908116603f01168101908282118183101715611359576113596112ef565b8160405283815286602085880101111561137257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156113aa57600080fd5b853567ffffffffffffffff808211156113c257600080fd5b6113ce89838a01611305565b965060208801359150808211156113e457600080fd5b6113f089838a01611305565b9550604088013591508082111561140657600080fd5b61141289838a01611305565b9450606088013591508082111561142857600080fd5b5061143588828901611305565b92505061144460808701611215565b90509295509295909350565b6000815180845260005b818110156114765760208185018101518683018201520161145a565b81811115611488576000602083870101525b50601f01601f19169290920160200192915050565b6080815260006114b06080830187611450565b82810360208401526114c28187611450565b905082810360408401526114d68186611450565b905082810360608401526114ea8185611450565b979650505050505050565b60008060006060848603121561150a57600080fd5b61151384611215565b925061152160208501611215565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561157157611571611547565b5060010190565b60008282101561158a5761158a611547565b500390565b634e487b7160e01b600052603160045260246000fd5b600082198211156115b8576115b8611547565b500190565b600181811c908216806115d157607f821691505b602082108114156115f257634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a61c73308411ecd95496446dd565f1ac647d813662f7d125fdb390d73083c8d764736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","01909152822082905560068901805491929091610f8a9084906115b1565b90915550600198975050505050505050565b60006001600160a01b038216610fb4575060006107d1565b506001600160a01b03166000908152602091909152604090205460ff1690565b6000610fe08383610f9c565b610fec575060006107d1565b6001600160a01b038216600090815260208481526040808320805460ff19169055600180870190925282208281559190611028908301826111a7565b6110366002830160006111a7565b6110446003830160006111a7565b6110526004830160006111a7565b6000600583018190556006830181905560078301805460ff1916905561107c9060088401906111e4565b50506001600160a01b03821660009081526002840160209081526040808320805460ff19169055600386019091528120819055600684018054600192906110c49084906115df565b909155506001949350505050565b6000805b6008548110156109df5782600360050182815481106110f7576110f761156a565b906000526020600020015414156111115750600192915050565b8061111b81611596565b9150506110d6565b82805461112f9061152f565b90600052602060002090601f0160209004810192826111515760008555611197565b82601f1061116a57805160ff1916838001178555611197565b82800160010185558215611197579182015b8281111561119757825182559160200191906001019061117c565b506111a39291506111fe565b5090565b5080546111b39061152f565b6000825580601f106111c3575050565b601f0160209004906000526020600020908101906111e191906111fe565b50565b50805460008255906000526020600020908101906111e191905b5b808211156111a357600081556001016111ff565b80356001600160a01b038116811461122a57600080fd5b919050565b60006020828403121561124157600080fd5b610c8a82611213565b6000815180845260005b8181101561127057602081850181015186830182015201611254565b81811115611282576000602083870101525b50601f01601f19169290920160200192915050565b6080815260006112aa608083018761124a565b82810360208401526112bc818761124a565b905082810360408401526112d0818661124a565b905082810360608401526112e4818561124a565b979650505050505050565b63b95aa35560e01b600052604160045260246000fd5b600082601f83011261131657600080fd5b813567ffffffffffffffff80821115611331576113316112ef565b604051601f8301601f19908116603f01168101908282118183101715611359576113596112ef565b8160405283815286602085880101111561137257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156113aa57600080fd5b853567ffffffffffffffff808211156113c257600080fd5b6113ce89838a01611305565b965060208801359150808211156113e457600080fd5b6113f089838a01611305565b9550604088013591508082111561140657600080fd5b61141289838a01611305565b9450606088013591508082111561142857600080fd5b5061143588828901611305565b92505061144460808701611213565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156114885783518352928401929184019160010161146c565b50909695505050505050565b600080604083850312156114a757600080fd5b6114b083611213565b946020939093013593505050565b6000806000606084860312156114d357600080fd5b6114dc84611213565b92506114ea60208501611213565b9150604084013590509250925092565b60008060006060848603121561150f57600080fd5b833592506020840135915061152660408501611213565b90509250925092565b600181811c9082168061154357607f821691505b602082108114156115645763b95aa35560e01b600052602260045260246000fd5b50919050565b63b95aa35560e01b600052603260045260246000fd5b63b95aa35560e01b600052601160045260246000fd5b60006000198214156115aa576115aa611580565b5060010190565b600082198211156115c4576115c4611580565b500190565b63b95aa35560e01b600052603160045260246000fd5b6000828210156115f1576115f1611580565b50039056fea264697066735822122038bfe93e5788deb3d24db9376b2f1ce3f50ad986f5baca4e9c3425c539211f8e64736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"AddSignaturesEvidence\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_person\",\"type\":\"address\"}],\"name\":\"cancelUser\",\"outputs\":[],\"selector\":[1966198298,1872889280],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":11,\"value\":[0]},{\"kind\":4,\"value\":[7]},{\"kind\":4,\"value\":[8]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderStatus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[599199094,3318140240],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"deleteOrderId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2902831952,2245609967],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"deltwo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1615073767,2803855168],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":11,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getHsah\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"}],\"selector\":[1504267998,4142414398],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":11,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tradingHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tradingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order_status\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Orders\",\"name\":\"order\",\"type\":\"tuple\"}],\"selector\":[3987888193,1306249832],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOrderIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"selector\":[61050802,621739569],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_user\",\"type\":\"address\"}],\"name\":\"judgeIsInBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1893651831,3107075598],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[7]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"judgeIsSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[3770726417,2549414622],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_person\",\"type\":\"address\"}],\"name\":\"putIntoBlackList\",\"outputs\":[],\"selector\":[1558043423,3244422733],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[9]}],\"inputs\":[],\"name\":\"queryNoUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[3816283982,3160960447],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_person\",\"type\":\"address\"}],\"name\":\"queryUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"selector\":[2947879161,207544358],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"m_person\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1606124671,434410559],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[7]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_signer\",\"type\":\"address\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[4145801271,853604445],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":11,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[3401240257,3109424420],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CANCELUSER = "cancelUser";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_DELETEORDERID = "deleteOrderId";

    public static final String FUNC_DELTWO = "deltwo";

    public static final String FUNC_GETHSAH = "getHsah";

    public static final String FUNC_GETORDER = "getOrder";

    public static final String FUNC_GETORDERIDLIST = "getOrderIdList";

    public static final String FUNC_JUDGEISINBLACKLIST = "judgeIsInBlackList";

    public static final String FUNC_JUDGEISSIGNED = "judgeIsSigned";

    public static final String FUNC_PUTINTOBLACKLIST = "putIntoBlackList";

    public static final String FUNC_QUERYNOUSER = "queryNoUser";

    public static final String FUNC_QUERYUSER = "queryUser";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_SIGN = "sign";

    public static final String FUNC_TRADING = "trading";

    public static final Event ADDSIGNATURESEVIDENCE_EVENT = new Event("AddSignaturesEvidence", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected OrderEvidence(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<AddSignaturesEvidenceEventResponse> getAddSignaturesEvidenceEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDSIGNATURESEVIDENCE_EVENT, transactionReceipt);
        ArrayList<AddSignaturesEvidenceEventResponse> responses = new ArrayList<AddSignaturesEvidenceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddSignaturesEvidenceEventResponse typedResponse = new AddSignaturesEvidenceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt cancelUser(String m_person) {
        final Function function = new Function(
                FUNC_CANCELUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String cancelUser(String m_person, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCELUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancelUser(String m_person) {
        final Function function = new Function(
                FUNC_CANCELUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCancelUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt createOrder(BigInteger _orderId, BigInteger _orderStatus,
            String owner) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderStatus), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createOrder(BigInteger _orderId, BigInteger _orderStatus, String owner,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderStatus), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateOrder(BigInteger _orderId, BigInteger _orderStatus,
            String owner) {
        final Function function = new Function(
                FUNC_CREATEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderStatus), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getCreateOrderInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEORDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateOrderOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEORDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteOrderId(String _owner, BigInteger _orderId) {
        final Function function = new Function(
                FUNC_DELETEORDERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deleteOrderId(String _owner, BigInteger _orderId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEORDERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteOrderId(String _owner, BigInteger _orderId) {
        final Function function = new Function(
                FUNC_DELETEORDERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDeleteOrderIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getDeleteOrderIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deltwo(String _owner, BigInteger _orderId) {
        final Function function = new Function(
                FUNC_DELTWO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deltwo(String _owner, BigInteger _orderId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELTWO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeltwo(String _owner, BigInteger _orderId) {
        final Function function = new Function(
                FUNC_DELTWO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDeltwoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELTWO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getDeltwoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELTWO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public byte[] getHsah(String _owner, BigInteger _orderId) throws ContractException {
        final Function function = new Function(FUNC_GETHSAH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Orders getOrder(String _owner, BigInteger _orderId) throws ContractException {
        final Function function = new Function(FUNC_GETORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Orders>() {}));
        return executeCallWithSingleValueReturn(function, Orders.class);
    }

    public List getOrderIdList(String _owner) throws ContractException {
        final Function function = new Function(FUNC_GETORDERIDLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Boolean judgeIsInBlackList(String m_user) throws ContractException {
        final Function function = new Function(FUNC_JUDGEISINBLACKLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean judgeIsSigned(String _useraddress) throws ContractException {
        final Function function = new Function(FUNC_JUDGEISSIGNED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_useraddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt putIntoBlackList(String m_person) {
        final Function function = new Function(
                FUNC_PUTINTOBLACKLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String putIntoBlackList(String m_person, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PUTINTOBLACKLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPutIntoBlackList(String m_person) {
        final Function function = new Function(
                FUNC_PUTINTOBLACKLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getPutIntoBlackListInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PUTINTOBLACKLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger queryNoUser() throws ContractException {
        final Function function = new Function(FUNC_QUERYNOUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<String, String, String, String> queryUser(String m_person) throws
            ContractException {
        final Function function = new Function(FUNC_QUERYUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue());
    }

    public TransactionReceipt registerUser(String _username, String _password, String _email,
            String _phone, String m_person) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_username), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_password), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_email), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String registerUser(String _username, String _password, String _email, String _phone,
            String m_person, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_username), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_password), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_email), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterUser(String _username, String _password,
            String _email, String _phone, String m_person) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_username), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_password), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_email), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_person)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getRegisterUserInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<Boolean> getRegisterUserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt sign(String m_signer) {
        final Function function = new Function(
                FUNC_SIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_signer)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String sign(String m_signer, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_signer)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSign(String m_signer) {
        final Function function = new Function(
                FUNC_SIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_signer)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSignInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SIGN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getSignOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SIGN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt trading(String _oldOwner, String _newOwner, BigInteger _orderId) {
        final Function function = new Function(
                FUNC_TRADING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_oldOwner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_newOwner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String trading(String _oldOwner, String _newOwner, BigInteger _orderId,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRADING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_oldOwner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_newOwner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTrading(String _oldOwner, String _newOwner,
            BigInteger _orderId) {
        final Function function = new Function(
                FUNC_TRADING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_oldOwner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_newOwner), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_orderId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTradingInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRADING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getTradingOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRADING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static OrderEvidence load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new OrderEvidence(contractAddress, client, credential);
    }

    public static OrderEvidence deploy(Client client, CryptoKeyPair credential, String m_admin)
            throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(m_admin)));
        return deploy(OrderEvidence.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class Orders extends StaticStruct {
        public byte[] tradingHash;

        public BigInteger tradingDate;

        public BigInteger order_id;

        public BigInteger order_status;

        public String owner;

        public Orders(Bytes32 tradingHash, Uint256 tradingDate, Uint256 order_id,
                Uint256 order_status, Address owner) {
            super(tradingHash,tradingDate,order_id,order_status,owner);
            this.tradingHash = tradingHash.getValue();
            this.tradingDate = tradingDate.getValue();
            this.order_id = order_id.getValue();
            this.order_status = order_status.getValue();
            this.owner = owner.getValue();
        }

        public Orders(byte[] tradingHash, BigInteger tradingDate, BigInteger order_id,
                BigInteger order_status, String owner) {
            super(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(tradingHash),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(tradingDate),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(order_id),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(order_status),new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner));
            this.tradingHash = tradingHash;
            this.tradingDate = tradingDate;
            this.order_id = order_id;
            this.order_status = order_status;
            this.owner = owner;
        }
    }

    public static class AddSignaturesEvidenceEventResponse {
        public TransactionReceipt.Logs log;

        public String _sender;
    }
}
